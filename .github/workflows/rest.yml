
    - name: Retrieve DB instance public ip address
      id: db_get_ip
      run: |
        # Added wait for instance to be running.
        aws ec2 wait instance-running --instance-ids "${{ steps.db_ec2_launch.outputs.db_ec2_id }}"
        db_public_ip=$(aws ec2 describe-instances \
          --instance-ids "${{ steps.db_ec2_launch.outputs.db_ec2_id }}" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "db_public_ip=$db_public_ip" >> $GITHUB_OUTPUT

    - name: Launch web EC2 instance from AMI
      id: web_ec2_launch
      run: |
        NAME="ec2-web-zero-storefront-${{ needs.create-golden-image.outputs.base_ami_namepart }}"
        INSTANCE_INFO=$(aws ec2 run-instances \
          --image-id "${{ needs.create-golden-image.outputs.base_ami_id }}" \
          --count 1 \
          --instance-type t2.micro \
          --key-name ${{ secrets.AWS_KEYNAME }} \
          --subnet-id ${{ secrets.AWS_SUBNET }} \
          --security-group-ids ${{ secrets.AWS_SECURITYGROUP }} \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$NAME},{Key=Role,Value=Web},{Key=CreatedBy,Value=Goldsmith pipeline}]" \
          --query 'Instances[0].[InstanceId]' \
          --output text)
        web_ec2_id=$(echo "$INSTANCE_INFO" | awk '{print $1}')
        echo "web_ec2_id=$web_ec2_id" >> $GITHUB_OUTPUT

    - name: Retrieve web instance public ip address
      id: web_get_ip
      run: |
        # Added wait for instance to be running.
        aws ec2 wait instance-running --instance-ids "${{ steps.web_ec2_launch.outputs.web_ec2_id }}"
        web_public_ip=$(aws ec2 describe-instances \
          --instance-ids "${{ steps.web_ec2_launch.outputs.web_ec2_id }}" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "web_public_ip=$web_public_ip" >> $GITHUB_OUTPUT

    - name: Display Public IPs
      run: |
        echo "DB IP: ${{ steps.db_get_ip.outputs.db_public_ip }}"
        echo "Web IP: ${{ steps.web_get_ip.outputs.web_public_ip }}"

    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible

    - name: Wait for EC2s to be ready
      run: |
        # It's better to use an explicit wait for SSH rather than a fixed sleep time.
        echo "Sleeping for initial setup... (This sleep is still here per request, but consider SSH waits)"
        sleep 180

    - name: Check for DB EC2 SSH is ready
      run: |
        for i in {1..30}; do
          if ssh -o StrictHostKeyChecking=no -i ./ec2-key.pem ubuntu@${{ steps.db_get_ip.outputs.db_public_ip }} exit 2>/dev/null; then
            echo "SSH is ready for DB"
            break
          fi
          echo "Waiting for SSH to DB... ($i)"
          sleep 5
        done

    - name: Check for web EC2 SSH is ready
      run: |
        for i in {1..30}; do
          if ssh -o StrictHostKeyChecking=no -i ./ec2-key.pem ubuntu@${{ steps.web_get_ip.outputs.web_public_ip }} exit 2>/dev/null; then
            echo "SSH is ready for Web"
            break
          fi
          echo "Waiting for SSH to Web... ($i)"
          sleep 5
        done

    - name: Write EC2 private key locally
      run: echo "${{ secrets.AWS_EC2_PRIVATE_KEY }}" > ./ec2-key.pem && chmod 600 ./ec2-key.pem

    - name: Run DB customization
      run: |
        ansible-playbook -i "${{ steps.db_get_ip.outputs.db_public_ip }}," image-db.yml \
        -u ubuntu --private-key ec2-key.pem

    - name: Run web customization
      run: |
        ansible-playbook -i "${{ steps.web_get_ip.outputs.web_public_ip }}," image-web.yml \
        -u ubuntu --private-key ec2-key.pem

    - name: Create DB AMI
      id: db_create_ami
      run: |
        ec2_id=${{ steps.db_ec2_launch.outputs.db_ec2_id }}
        echo "Creating db AMI from instance: $ec2_id"
        AMI_ID=$(aws ec2 create-image \
          --instance-id "$ec2_id" \
          --name "ami-storefront-db-${{ steps.create-golden-image.outputs.base_ami_namepart }}" \
          --no-reboot \
          --query 'ImageId' \
          --output text)

        aws ec2 create-tags \
          --resources "$AMI_ID" \
          --tags \
          Key=Name,Value="snapshot-storefront-db-${{ steps.create-golden-image.outputs.base_ami_namepart }}" \
          Key=CreatedBy,Value="Goldsmith pipeline" \
          Key=Environment,Value="Prod"

        echo "DB AMI created: $AMI_ID"
        echo "db_ami_id=$AMI_ID" >> $GITHUB_OUTPUT

    - name: Create web AMI
      id: web_create_ami
      run: |
        ec2_id=${{ steps.web_ec2_launch.outputs.web_ec2_id }}
        echo "Creating web AMI from instance: $ec2_id"
        AMI_ID=$(aws ec2 create-image \
          --instance-id "$ec2_id" \
          --name "ami-storefront-web-${{ steps.create-golden-image.outputs.base_ami_namepart }}" \
          --no-reboot \
          --query 'ImageId' \
          --output text)

        aws ec2 create-tags \
          --resources "$AMI_ID" \
          --tags \
          Key=Name,Value="snapshot-storefront-web-${{ steps.create-golden-image.outputs.base_ami_namepart }}" \
          Key=CreatedBy,Value="Goldsmith pipeline" \
          Key=Environment,Value="Prod"

        echo "Web AMI created: $AMI_ID"
        echo "web_ami_id=$AMI_ID" >> $GITHUB_OUTPUT

    - name: Display AMI IDs
      run: |
        echo "DB AMI: ${{ steps.db_create_ami.outputs.db_ami_id }}"
        echo "Web AMI: ${{ steps.web_create_ami.outputs.web_ami_id }}"

    # - name: Terminate DB EC2 instance
    #   if: always() # Ensures termination even if previous steps fail
    #   run: |
    #     aws ec2 terminate-instances --instance-ids ${{ steps.db_ec2_launch.outputs.db_ec2_id }}

    # - name: Terminate web EC2 instance
    #   if: always() # Ensures termination even if previous steps fail
    #   run: |
    #     aws ec2 terminate-instances --instance-ids ${{ steps.web_ec2_launch.outputs.web_ec2_id }}

# -------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------
  # distribute-image:
  #   name: Distribute golden image
  #   runs-on: ubuntu-latest
  #   environment: Prod
  #   steps: test-base-image

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
  #       aws-region: ${{ vars.AWS_REGION }}

# -------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------
  # setup-dashboard:
  #   name: Setup dashboard
  #   runs-on: ubuntu-latest
  #   environment: Prod
  #   steps: distribute-image

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
  #       aws-region: ${{ vars.AWS_REGION }}

# -------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------
  # incident-tracking:
  #   name: Setup incident tracking
  #   runs-on: ubuntu-latest
  #   environment: Prod
  #   steps: setup-dashboard

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
  #       aws-region: ${{ vars.AWS_REGION }}