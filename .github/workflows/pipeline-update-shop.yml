name: Create & deploy Storefront infrastucture

on:
  push:
    branches: [ "test" ]

permissions:
  id-token: write
  contents: read

jobs:
  # reset-aws:
  #   name: Reset AWS objects
  #   uses: ./.github/workflows/pipeline-drop-aws.yml
  #   secrets: inherit

  # create-golden-image:
  #   name: Create base image
  #   needs: reset-aws
  #   runs-on: ubuntu-latest
  #   environment: Prod
  #   outputs:
  #     ami_id: ${{ steps.packerbuild.outputs.ami_id }}
    
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
  #       aws-region: ${{ vars.AWS_REGION }}

  #   - name: Install Packer
  #     uses: hashicorp/setup-packer@v2
  #     with:
  #       version: 'latest'

  #   - name: Initialize Packer
  #     run: packer init image-base.pkr.hcl

  #   - name: Validate Packer template
  #     run: packer validate -var "aws_region=${{ vars.AWS_REGION }}" image-base.pkr.hcl

  #   - name: Build and customize base AMI
  #     id: packerbuild
  #     run: |
  #       echo "Running Packer build..."
  #       packer build -var "aws_region=${{ vars.AWS_REGION }}" -machine-readable image-base.pkr.hcl | tee packer_output.log

  #       echo "Extracting AMI ID from output..."
  #       AMI_ID=$(awk -F, '/artifact,0,id/ {print $6}' packer_output.log | cut -d ':' -f2)
        
  #       # share ami with dev admin user
  #       aws ec2 modify-image-attribute \
  #         --image-id $AMI_ID \
  #         --launch-permission "Add=[{UserId=${{ secrets.AWS_USER_DEVADMIN }}}]"

  #       echo "AMI ID: $AMI_ID"
  #       echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
# --------------------------------------------------
  test-base-image:
    name: Test base image
    # needs: create-golden-image
    runs-on: ubuntu-latest
    environment: Prod
    outputs:
      instance_id: ${{ steps.ec2_launch.outputs.INSTANCE_ID }}
      public_ip: ${{ steps.ec2_launch.outputs.PUBLIC_IP }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
        aws-region: ${{ vars.AWS_REGION }}

    # --image-id ${{ needs.create-golden-image.outputs.ami_id }}
    - name: Launch EC2 instance from AMI
      id: ec2_launch
      run: |
        TIMESTAMP=$(date +%s)
        NAME="ec2-base-zero-storefront-${TIMESTAMP}"
        INSTANCE_INFO=$(aws ec2 run-instances \
          --image-id "ami-0caf48451cb6750de" \
          --count 1 \
          --instance-type t2.micro \
          --key-name ${{ secrets.AWS_KEYNAME }} \
          --subnet-id ${{ secrets.AWS_SUBNET }} \
          --security-group-ids ${{ secrets.AWS_SECURITYGROUP }} \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$NAME},{Key=Role,Value=Base}]" \
          --query 'Instances[0].[InstanceId,PublicIpAddress]' \
          --output text)
        INSTANCE_ID=$(echo "$INSTANCE_INFO" | awk '{print $1}')
        PUBLIC_IP=$(echo "$INSTANCE_INFO" | awk '{print $2}')
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
        echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

    - name: Write EC2 private key
      run: echo "${{ secrets.AWS_EC2_PRIVATE_KEY }}" > ec2-key.pem && chmod 600 ec2-key.pem
      
    - name: Install InSpec
      run: |
        curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec

    - name: Run InSpec tests
      run: |
        CHEF_LICENSE=accept inspec exec inspec-profile/controls/image-base.rb \
        -t ssh://ubuntu@${{ steps.ec2_launch.outputs.public_ip }} \
        --key-files ./ec2-key.pem



    # distribute-image:
    #   name: Distribute golden image
    #   runs-on: ubuntu-latest
    #   environment: Prod
    #   needs: test-image

    #   steps:
    #   - name: Checkout
    #     uses: actions/checkout@v4

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
    #       aws-region: ${{ vars.AWS_REGION }}
          
    # setup-dashboard:
    #   name: Setup dashboard
    #   runs-on: ubuntu-latest
    #   environment: Prod
    #   needs: distribute-image

    #   steps:
    #   - name: Checkout
    #     uses: actions/checkout@v4

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
    #       aws-region: ${{ vars.AWS_REGION }}

    # incident-tracking:
    #   name: Setup incident tracking
    #   runs-on: ubuntu-latest
    #   environment: Prod
    #   needs: setup-dashboard

    #   steps:
    #   - name: Checkout
    #     uses: actions/checkout@v4

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
    #       aws-region: ${{ vars.AWS_REGION }}