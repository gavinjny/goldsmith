name: Create & deploy Storefront infrastructure

on:
  push:
    branches: [ "test" ]

permissions:
  id-token: write
  contents: read

jobs:
  # The following jobs are currently commented out.
  # Uncomment them and adjust 'needs:' dependencies as you build out your pipeline.

  # reset-aws:
  #   name: Reset AWS objects
  #   uses: ./.github/workflows/pipeline-drop-aws.yml
  #   secrets: inherit

  # create-golden-image:
  #   name: Create base image
  #   needs: reset-aws # Ensure 'reset-aws' is uncommented if this dependency is active
  #   runs-on: ubuntu-latest
  #   environment: Prod
  #   outputs:
  #     ami_id: ${{ steps.packerbuild.outputs.ami_id }}

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
  #       aws-region: ${{ vars.AWS_REGION }}

  #   - name: Install Packer
  #     uses: hashicorp/setup-packer@v2
  #     with:
  #       version: 'latest'

  #   - name: Initialize Packer
  #     run: packer init image-base.pkr.hcl

  #   - name: Validate Packer template
  #     run: packer validate -var "aws_region=${{ vars.AWS_REGION }}" image-base.pkr.hcl

  #   - name: Build and customize base AMI
  #     id: packerbuild
  #     run: |
  #       echo "Running Packer build..."
  #       packer build -var "aws_region=${{ vars.AWS_REGION }}" -machine-readable image-base.pkr.hcl | tee packer_output.log
  #       echo "Extracting AMI ID from output..."
  #       AMI_ID=$(awk -F, '/artifact,0,id/ {print $6}' packer_output.log | cut -d ':' -f2)

  #   - name: Share AMI with dev admin user
  #       aws ec2 modify-image-attribute \
  #         --image-id "$AMI_ID" \
  #         --launch-permission "Add=[{UserId=${{ secrets.AWS_USER_DEVADMIN }}}]"
  #       echo "AMI ID: $AMI_ID"
  #       echo "ami_id=$AMI_ID"

  test-base-image:
    name: Test base image
    runs-on: ubuntu-latest
    environment: Prod
    outputs:
      instance_id: ${{ steps.ec2_launch.outputs.instance_id }}
      public_ip: ${{ steps.ec2_launch.outputs.public_ip }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Launch EC2 instance from AMI
      id: ec2_launch
      run: |
        TIMESTAMP=$(date +%s)
        NAME="ec2-base-zero-storefront-${TIMESTAMP}"
        INSTANCE_INFO=$(aws ec2 run-instances \
          --image-id "ami-0caf48451cb6750de" \
          --count 1 \
          --instance-type t2.micro \
          --key-name ${{ secrets.AWS_KEYNAME }} \
          --subnet-id ${{ secrets.AWS_SUBNET }} \
          --security-group-ids ${{ secrets.AWS_SECURITYGROUP }} \
          --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$NAME},{Key=Role,Value=Base}]" \
          --query 'Instances[0].[InstanceId]' \
          --output text)
        instance_id=$(echo "$INSTANCE_INFO" | awk '{print $1}')
        echo "instance_id=$instance_id" >> $GITHUB_OUTPUT

    - name: Retrieve instance public ip address
      id: get_ip
      run: |
        public_ip=$(aws ec2 describe-instances \
          --instance-ids "${{ steps.ec2_launch.outputs.instance_id }}" \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "public_ip=$public_ip"

    # - name: Write EC2 private key
    #   run: echo "${{ secrets.AWS_EC2_PRIVATE_KEY }}" > ./ec2-key.pem && chmod 600 ./ec2-key.pem

    # - name: Run InSpec test on EC2
    #   run: |
    #     set -e
    #     CHEF_LICENSE=accept inspec exec inspec-profile/controls/image-base.rb \
    #       -t ssh://ubuntu@${{ steps.get_ip.outputs.public_ip }} \
    #       --key-files ./ec2-key.pem

    # - name: Terminate EC2 instance
    #   if: always() # Ensures termination even if previous steps fail
    #   run: |
    #     aws ec2 terminate-instances --instance-ids ${{ steps.ec2_launch.outputs.instance_id }}

  # distribute-image:
  #   name: Distribute golden image
  #   runs-on: ubuntu-latest
  #   environment: Prod
  #   needs: test-base-image # Corrected dependency from 'test-image'

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
  #       aws-region: ${{ vars.AWS_REGION }}

  # setup-dashboard:
  #   name: Setup dashboard
  #   runs-on: ubuntu-latest
  #   environment: Prod
  #   needs: distribute-image

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
  #       aws-region: ${{ vars.AWS_REGION }}

  # incident-tracking:
  #   name: Setup incident tracking
  #   runs-on: ubuntu-latest
  #   environment: Prod
  #   needs: setup-dashboard

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
  #       aws-region: ${{ vars.AWS_REGION }}