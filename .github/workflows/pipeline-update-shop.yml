name: Create & deploy Storefront infrastucture

on:
  push:
    branches: [ "test" ]

permissions:
  id-token: write
  contents: read

jobs:
  reset-aws:
    uses: ./.github/workflows/pipeline-drop-aws.yml
    secrets: inherit

  create-golden-image:
    needs: reset-aws
    runs-on: ubuntu-latest
    environment: Prod
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Install Packer
      uses: hashicorp/setup-packer@v2
      with:
        version: 'latest'

    - name: Initialize Packer
      run: packer init image-base.pkr.hcl

    - name: Validate Packer template
      run: packer validate -var "aws_region=${{ vars.AWS_REGION }}" image-base.pkr.hcl

    - name: Build and customize base AMI
      run: |
        echo "ðŸ”¨ Running packer build..."
        packer build -machine-readable image-base.pkr.hcl | tee packer_output.log

        echo "ðŸ“¦ Extracting AMI ID from output..."
        AMI_ID=$(awk -F, '/artifact,0,id/ {print $6}' packer_output.log | cut -d ':' -f2)
        
        echo "âœ… AMI ID: $AMI_ID"
        echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

  
    # - name: Launch EC2 instance from AMI
    #   run: |
    #     TIMESTAMP=$(date +%s)
    #     NAME="ec2-base-zero-${TIMESTAMP}"
    #     INSTANCE_ID=$(aws ec2 run-instances \
    #       --image-id ${{ steps.packer.outputs.ami_id }} \
    #       --count 1 \
    #       --instance-type t2.micro \
    #       --key-name ${{ secrets.AWS_KEYNAME }} \
    #       --subnet-id ${{ secrets.AWS_SUBNET }} \
    #       --security-group-ids ${{ secrets.AWS_SECURITYGROUP }} \
    #       --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$NAME}]" \
    #       --query 'Instances[0].InstanceId' \
    #       --output text)

    #     echo "Launched EC2 instance: $INSTANCE_ID"

    # distribute-image:
    #   name: Distribute golden image
    #   runs-on: ubuntu-latest
    #   environment: Prod
    #   needs: create-image

    #   steps:
    #   - name: Checkout
    #     uses: actions/checkout@v4

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
    #       aws-region: ${{ vars.AWS_REGION }}
          
    # setup-dashboard:
    #   name: Setup dashboard
    #   runs-on: ubuntu-latest
    #   environment: Prod
    #   needs: distribute-image

    #   steps:
    #   - name: Checkout
    #     uses: actions/checkout@v4

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
    #       aws-region: ${{ vars.AWS_REGION }}

    # incident-tracking:
    #   name: Setup incident tracking
    #   runs-on: ubuntu-latest
    #   environment: Prod
    #   needs: setup-dashboard

    #   steps:
    #   - name: Checkout
    #     uses: actions/checkout@v4

    #   - name: Configure AWS credentials
    #     uses: aws-actions/configure-aws-credentials@v2
    #     with:
    #       role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
    #       aws-region: ${{ vars.AWS_REGION }}