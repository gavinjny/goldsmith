name: Drop Storefront infrastucture

on:
  workflow_call:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Reset AWS Storefront Objects
    runs-on: ubuntu-latest
    environment: Prod

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_PIPELINE_ROLE }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Terminate EC2 instances
      run: |
        INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=*storefront*" "Name=instance-state-name,Values=running,stopped" \
          --query "Reservations[].Instances[].InstanceId" \
          --output text)

        if [ -n "$INSTANCE_IDS" ]; then
          aws ec2 terminate-instances --instance-ids $INSTANCE_IDS
          echo "Terminated EC2 instances: $INSTANCE_IDS"
        else
          echo "No EC2 instances found with 'storefront' in the name."
        fi

    - name: Delete ALBs/NLBs
      run: |
        ELB_ARNS=$(aws elbv2 describe-load-balancers \
          --query "LoadBalancers[?contains(LoadBalancerName, 'storefront')].LoadBalancerArn" \
          --output text)

        for arn in $ELB_ARNS; do
          aws elbv2 delete-load-balancer --load-balancer-arn "$arn"
          echo "Deleted ALB/NLB: $arn"
        done

    - name: Delete snapshots
      run: |
        DASHBOARDS=$(aws cloudwatch list-dashboards \
          --query "DashboardEntries[?contains(DashboardName, 'storefront')].DashboardName" \
          --output text)

        for name in $DASHBOARDS; do
          aws cloudwatch delete-dashboards --dashboard-names "$name"
          echo "Deleted CloudWatch Dashboard: $name"
        done

    - name: Deregister AMIs and delete snapshots
      run: |
        AMI_IDS=$(aws ec2 describe-images \
          --owners self \
          --query "Images[?contains(Name, 'storefront')].ImageId" \
          --output text)

        if [ -z "$AMI_IDS" ]; then
          echo "No AMIs found with 'storefront' in the name."
          exit 0
        fi

        for AMI_ID in $AMI_IDS; do
          echo "Processing AMI: $AMI_ID"

          # Get associated snapshot IDs
          SNAPSHOT_IDS=$(aws ec2 describe-images \
            --image-ids "$AMI_ID" \
            --query "Images[].BlockDeviceMappings[].Ebs.SnapshotId" \
            --output text)

          # Deregister AMI
          aws ec2 deregister-image --image-id "$AMI_ID"
          echo "Deregistered AMI: $AMI_ID"

          # Delete associated snapshots
          for SNAPSHOT_ID in $SNAPSHOT_IDS; do
            aws ec2 delete-snapshot --snapshot-id "$SNAPSHOT_ID"
            echo "Deleted snapshot: $SNAPSHOT_ID"
          done
        done
